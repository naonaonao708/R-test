3+5
2^3
summary(c(12,22,31,12,33,22,32,25))
3+5
height
height
height <- c(173,165,187,168,180,175,179)
height
test_a <- c(10,13,8,15,8)
test_a
sd(test_a)
# 平均偏差：平均からの偏差の絶対値の平均
mean(abs(test_a-mean(test_a)))
test_b <- c(13,14,7,12,10,6,8,15,4,14,9,6,10,12,5,12,8,8,12,15)
mean(test_b)
# 標本分散で標準偏差を求める
# sd関数では不偏分散の平方根で計算されるので、sqrt(mean(x-x_mean)^2)で求める
test_b_sd <- sqrt(mean((test_b-mean(test_b))^2))
test_b_sd
# z得点＝（データー平均）/標準偏差
# z得点：平均０、標準偏差１に変換した標準得点
test_b_z <- (test_b-mean(test_b)/test_b_sd)
test_b_z
# z得点＝（データー平均）/標準偏差
# z得点：平均０、標準偏差１に変換した標準得点
test_b_z <- (test_b-mean(test_b))/test_b_sd
test_b_z
# 偏差値＝z得点*10+50
# 偏差値：平均50、標準偏差10になるように標準化した標準得点
test_b_t <- test_b_z*10+50
test_b_t
a_univ <- c(60,100,50,40,50,230,120,240,200,30)
b_univ <- c(50,60,40,50,100,80,30,20,100,120)
hist(a_univ)
hist(b_univ)
mean(a_univ)
sqrt(mean((a_univ-mean(a_univ))^2))
mean(b_univ)
sqrt(mean((b_univ-mean(b_univ))^2))
(a_univ-mean(a_univ))/sqrt(mean((a_univ-mean(a_univ))^2))*10+50
a <- c(1.116,1.693,1.723,1.78,1.834,1.796,1.789,1.666)
1300/a-1300
1300/*-1300
1300*-1300
1300*a-1300
rm(a)
(b_univ-mean(b_univ))/sqrt(mean((b_univ-mean(b_univ))^2))*10+50
a <- c(1.522,1.393,1.742,1.422,1.051,1.565,1.619,1.214)
a*1300-1300
# 確率分布
dice_100 <- ceiling(runif(n=100,min=o,max=6))
# 確率分布
dice_100 <- ceiling(runif(n=100,min=0,max=6))
dice_100
table(dice_100)
#母集団分布
barplot(c(2/3,1/3),names.arg=c("男性","女性"))
#母集団分布
barplot(c(2/3,1/3),names.arg=c("man","woman"))
# 正規分布
curve(dnorm(x,mean=0,sd=1),from=-4,to=4)
# rnorm(n, mean, sd)：標準正規分布に従う乱数の作成
rnorm(n=5,mean=50,sd=10)
hist(rnorm(n=5,mean=50,sd=10))
hist(rnorm(n=1000,mean=50,sd=10))
hist(rnorm(n=100000,mean=50,sd=10))
sample_mean <- numeric(length=10000)　# 推定値を格納する場所を予約
for(i in 1:10000){
sample_test <- rnorm(n=10,mean=50,sd=10)
sample_mean[i] <- mean(sample_test) # 標本平均の計算
}
hist(sample_mean)
hist(sample_mean,freq=FALSE)
curve(dnorm(x,mean=50,sd=sqrt(10)),add=TRUE)
curve(dnorm(x,mean=50,sd=sqrt(10)),add=TRUE)
# N(50,10^2)の正規母集団からn=20の標本抽出を5000回繰り返す
test_mean <- numeric(length=10000)
or(i in 1:10000){
tes <- rnorm(n=20,mean=50,sd=10)
test_mean <- mean(tes)
}
for(i in 1:10000){
tes <- rnorm(n=20,mean=50,sd=10)
test_mean <- mean(tes)
}
test_mean <- numeric(length=5000)
for(i in 1:5000){
tes <- rnorm(n=20,mean=50,sd=10)
test_mean <- mean(tes)
}
hist(test_mean)
test_mean <- numeric(length=5000)
for(i in 1:5000){
tes <- rnorm(n=20,mean=50,sd=10)
test_mean[i] <- mean(tes)
}
hist(test_mean)
hist(test_mean,freq=FALSE)
curve(dnorm(x,mean=50,sd=10),add=TRUE)
hist(test_mean,freq=FALSE)
curve(dnorm(x,mean=50,sd=sqrt(10)),add=TRUE)
curve(dnorm(x,mean=50,sd=sqrt(100/20)),add=TRUE)
for(i in 1:5000){
tes <- rnorm(n=20,mean=50,sd=10)
test_mean[i] <- mean(tes)
}
hist(test_mean,freq=FALSE)
curve(dnorm(x,mean=50,sd=sqrt(100/20)),add=TRUE)
# 理論的な標本分布についてサンプルサイズをn=1,4,9,16,25と変化させる　N(0,1^2)
curve(dnorm(x,mean=0,sd=sqrt(1/25)),-3,3)
curve(dnorm(x,mean=0,sd=sqrt(1/16)),-3,3)
# 理論的な標本分布についてサンプルサイズをn=1,4,9,16,25と変化させる　N(0,1^2)
curve(dnorm(x,mean=0,sd=sqrt(1/25)),-3,3)
curve(dnorm(x,mean=0,sd=sqrt(1/16)),-3,3)
curve(dnorm(x,mean=0,sd=sqrt(1/9)),-3,3)
curve(dnorm(x,mean=0,sd=sqrt(1/4)),-3,3)
curve(dnorm(x,mean=0,sd=sqrt(1/1)),-3,3)
# qnorm(p)：第一引数に確率を受けて、確率密度を返す
qnorm(0.025)
qnorm(0.975)
qnorm(0.025, lower.tail = FALSE) #上側確率0.025のz値
pnorm(-2.828427) # 下側確率Prob(z=<-2.828427)
pnorm(2.828427,lower.tail = FALSE) # 上側確率Prob(z>2.828427)
2*pnorm(2.82847,lower.tail = FALSE) # 両側検定なので＊２
# 練習問題
testa <- c(165,150,170,168,159,170,167,178,155,159,161,162,166,171,155,160,168,172,155,167)
t.test(testa,mu=170)
pra_time <- c(1,3,10,12,6,3,8,4,1,5)
pra_score <- c(20,40,100,80,50,50,70,50,10,60)
cor.test(pra_time,pra_score)
cor.test(pra_time,pra_score,method = "spearman")
cor.test(pra_time,pra_score,method = "kendall")
洋食和食 <- c("洋食","和食","和食","洋食","和食","洋食","洋食","和食","洋食","洋食","和食","洋食","和食","洋食","和食","和食","洋食","洋食","和食","和食")
# 分散分析
# 一元配置分散分析
# データに含まれる因子（要因の中でも母平均に差をもたらすと考えられる研究対象）の数が一つのもの
setwd('~/Desktop/R-test')
df <- read.csv('./data/shidouhouU8.csv')
stat2_a <- df[df$method=="A",]$stat_test2
stat2_b <- df[df$method=="B",]$stat_test2
stat2_c <- df[df$method=="C",]$stat_test2
stat2_d <- df[df$method=="D",]$stat_test2
# 帰無仮説：４群の母平均は等しい(指導法の違いによる統計学の学習効果に差は無い)
# factor関数：要因型ベクトルに変更する
df_method <- factor(df$method)
df_method
oneway.test(df$stat_test2~df_method,var.equal = TRUE)
# 一元配置分散分析のみ実行
aov(df$stat_test2~df_method)
summary(aov(df$stat_test2~df_method))
# 分散分析表を表示
anova(lm(df$stat_test2~df_method))
# 複数のモデルの比較など高度な分析に対応
# cbind()：横方向に繋いで行列を作る関数
all_data <- cbind(stat2_a,stat2_b,stat2_c,stat2_d)
all_data
# colMeans()：行列の列ごとの平均を求める関数
colMeans(all_data)
all_data - mean(all_data)
colMeans(all_data) - mean(all_data)
all_data - colMeans(all_data)
# 全体平方和
sum((all_data - mean(all_data))^2)
# 群間平方和
sum(rep((colMeans(all_data) - mean(all_data)),4)^2)
# 多重比較（Tukeyの方法）
# 帰無仮説：４群の平均は等しい
q <- abs(mean(stat2_a)-mean(stat2_d))/sqrt(8.625/nrow(all_data))
q
qtukey(0.95,4,16)
qtukey(0.05,4,16,lower.tail = FALSE)
# Tukeyによる多重比較
TukeyHSD(aov(df$stat_test2~df_method))
favor <- c(7,8,9,5,6,5,4,7,1,3,8,6,7,2,5)
subject <- factor(c(rep("線形代数",5),rep("微分積分",5),rep("確率統計",5)))
summary(aov(favor~subject))
# 帰無仮説：三科目の好意度の母平均は等しい
# 検定統計量はF＝（条件平方和／条件の自由度）／（残差平方和／残差の自由度）
people <- factor(rep(c("田中","岸","大引","吉川","荻野"),3))
summary(aov(favor~subject+people))
all_data <- matrix(c(7,8,9,5,6,5,4,7,1,3,8,6,7,2,5),nrow=5,ncol=3)
colMeans(all_data)
rowMeans(all_data)
all_matrix <- matrix(rep(mean(all_data),15),nrow=5,ncol=3)
all_matrix
subject_matrix <- matrix(rep(colMeans(all_data),5),nrow=5,ncol=3,byrow=TRUE)
subject_matrix
people_matrix <- matrix(rep(rowMeans(all_data),3),nrow=5,ncol=3)
people_matrix
# 全体平方和
all_ss <- sum((all_data-all_matrix)^2)
all_ss
# 条件平方和
condition_ss <- sum((subject_matrix-all_matrix)^2)
condition_ss
# 個人差平方和
individual_ss <- sum((people_matrix-all_matrix)^2)
individual_ss
# 残差平方和
residual_ss <- sum((all_data-all_matrix-(subject_matrix-all_matrix)-(people_matrix-all_matrix))^2)
residual_ss
qf(0.05,2,8,lower.tail = FALSE)
taste <- c(6,4,5,3,2,10,8,10,8,9,11,12,12,10,10,5,4,2,2,2,7,6,5,4,3,12,8,5,6,4)
temperature <- factor(c(rep("冷蔵",15),rep("常温",15)))
brand <- factor(rep(c(rep("イカアン",5),rep("ボズビック",5),rep("ビビッテル",5)),2))
summary(aov(taste~temperature*brand))
# 交互作用効果は要因を：で結んで表す
summary(aov(taste~temperature:brand))
# 交互作用効果は要因を：で結んで表す
summary(aov(taste~temperature+brand+temperature:brand))
interaction.plot(temperature,brand,taste)
interaction.plot(brand,temperature,taste)
num_id <- factor(rep(1:5,6))
summary(aov(taste~temperature*brand+Error(num_id+num_id:temperature+num_id:brand+num_id:temperature:brand)))
# 二元配置分散分析（１要因のみ対応あり）
num_id2 <- factor(c(rep(1:5,3),rep(6:10,3)))
summary(aov(taste~temperature*brand+Error(num_id2:temperature+num_id2:temperature:brand)))
